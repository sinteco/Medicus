{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","containers/appointments/lists.js","containers/appointments/views/waitingRoom.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","DateItem","props","className","date","long","DefaultItem","message","ListView","groupByStartTimeMap","Map","appointments","appointment","startDate","Date","startTime","toDateString","has","set","get","push","appointmentGroupItems","size","entries","groupDate","groupItem","map","index","session","id","deleteAppointment","listView","defaultMessage","InfiniteAppointmentList","useSelector","s","getAppointments","useCallback","a","view","search","page","limit","searchParams","URLSearchParams","append","fetch","toString","headers","authToken","response","json","ok","Error","useState","state","setState","Math","ceil","length","newAppointments","prevState","updatedAppointments","console","error","filter","err","useEffect","load","callback","WaitingRoomView","searchQuery","setSearchQuery","showNewAppointment","Boolean","isPhysician","title","handleSearch","placeholder","path","icon"],"mappings":"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","file":"static/js/15.0d505231.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { PrettyDate } from '../../components/dates';\r\nimport { Col, FluidContainer, Row } from '../../components/layout';\r\nimport { List, ListItem } from '../../components/lists';\r\nimport { AutoLoader } from '../../components/loaders';\r\n\r\nimport Appointment from './appointment';\r\n\r\n\r\nfunction DateItem(props) {\r\n    return (\r\n        <FluidContainer className=\"md-appt-date p-3\">\r\n            <Row className=\"justify-content-center\">\r\n                <Col className=\"col-auto align-items-center\">\r\n                    <h6 className=\"my-0\">\r\n                        <PrettyDate date={props.date} long={true}/>\r\n                    </h6>\r\n                </Col>\r\n            </Row>\r\n        </FluidContainer>\r\n    );\r\n}\r\n\r\n\r\nfunction DefaultItem(props) {\r\n    return (\r\n        <Row className=\"justify-content-center\">\r\n            <Col className=\"col-auto align-items-center\">\r\n                <h6 className=\"my-0 py-3 text-muted\">\r\n                    {props.message}\r\n                </h6>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\n\r\nfunction ListView(props) {\r\n    const groupByStartTimeMap = new Map();\r\n    for (const appointment of props.appointments) {\r\n        const appointmentStartTime = new Date(appointment.startTime);\r\n        const startDate = appointmentStartTime.toDateString();\r\n\r\n        if (!groupByStartTimeMap.has(startDate)) {\r\n            groupByStartTimeMap.set(startDate, []);\r\n        }\r\n        groupByStartTimeMap.get(startDate).push(appointment);\r\n    }\r\n\r\n    const appointmentGroupItems = [];\r\n    if (groupByStartTimeMap.size > 0) {\r\n        for (const [startDate, appointments] of groupByStartTimeMap.entries()) {\r\n            let groupDate = new Date(startDate);\r\n\r\n            let groupItem = (\r\n                <Row>\r\n                    <Col className=\"px-0\">\r\n                        <DateItem\r\n                            date={groupDate}\r\n                        />\r\n                        <List className=\"md-list\">\r\n                            {appointments.map((appointment, index) => (\r\n                                <ListItem key={index} className=\"p-0 my-1\">\r\n                                    <Appointment\r\n                                        session={props.session}\r\n                                        id={appointment.id}\r\n                                        deleteAppointment={props.deleteAppointment}\r\n                                        listView={true}\r\n                                    />\r\n                                </ListItem>\r\n                            ))}\r\n                        </List>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n\r\n            appointmentGroupItems.push(groupItem);\r\n        }\r\n        \r\n    } else {\r\n        appointmentGroupItems.push(\r\n            <DefaultItem message={props.defaultMessage} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <FluidContainer>\r\n            {appointmentGroupItems}\r\n        </FluidContainer>\r\n    );\r\n}\r\n\r\n\r\nexport default function InfiniteAppointmentList(props) {\r\n    const session = useSelector(s => s.session);\r\n\r\n    const getAppointments = useCallback(async ({view='', search='', page=0, limit=10}) => {\r\n        try {\r\n            const searchParams = new URLSearchParams();\r\n            (view) && searchParams.append('view', view);\r\n            (search) && searchParams.append('search', search);\r\n            searchParams.append('page', page);\r\n            searchParams.append('limit', limit);\r\n\r\n            const response = await fetch(`/api/appointments?${searchParams.toString()}`, {\r\n                headers: {\r\n                  'Authorization': `Bearer ${session.authToken}`\r\n                }\r\n            });\r\n\r\n            const appointments = await response.json();\r\n            if (!response.ok) {\r\n                throw new Error(appointments.message);\r\n            }\r\n\r\n            return appointments;\r\n        } catch (err) {\r\n            throw(err);\r\n        }\r\n    }, [session.authToken]);\r\n\r\n    const [state, setState] = useState({\r\n        appointments: [],\r\n        limit: 10\r\n    });\r\n\r\n    // If props change, initialize appointments.\r\n    useEffect(() => {\r\n        async function load() {\r\n            try {\r\n                const newAppointments = await getAppointments({\r\n                    view: props.view,\r\n                    search: props.search,\r\n                    page: 0,\r\n                    limit: state.limit\r\n                });\r\n\r\n                setState(prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        appointments: newAppointments\r\n                    }\r\n                });\r\n            } catch (err) {\r\n                console.error(`Failed to load appointments. ${err}`);\r\n            }\r\n        }\r\n\r\n        load();\r\n    }, [props.view, props.search, getAppointments, state.limit]);\r\n\r\n    async function appendAppointments() {\r\n        try {\r\n            const newAppointments = await getAppointments({\r\n                view: props.view,\r\n                search: props.search,\r\n                page: Math.ceil(state.appointments.length / state.limit),\r\n                limit: state.limit\r\n            });\r\n\r\n            setState(prevState => {\r\n                const updatedAppointments = [...prevState.appointments, ...newAppointments];\r\n\r\n                return {\r\n                    ...prevState,\r\n                    appointments: updatedAppointments\r\n                }\r\n            });\r\n        } catch (err) {\r\n            console.error(`Failed to append more appointments. ${err}`);\r\n        }\r\n    }\r\n\r\n    async function deleteAppointment(id) {\r\n        try {\r\n            setState(prevState => {\r\n                const updatedAppointments = prevState.appointments.filter(appointment => {\r\n                    return appointment.id !== id;\r\n                });\r\n\r\n                return {\r\n                    ...prevState,\r\n                    appointments: updatedAppointments\r\n                }\r\n            });\r\n        } catch (err) {\r\n            console.error(`Failed to delete appointment- ${id}. ${err}`);\r\n        }\r\n    }\r\n\r\n    // Now render view.\r\n    return (\r\n        <FluidContainer>\r\n            <Row>\r\n                <Col className=\"px-0\">\r\n                    <ListView\r\n                        session={session}\r\n                        appointments={state.appointments}\r\n                        deleteAppointment={deleteAppointment}\r\n                        defaultMessage={props.defaultMessage}\r\n                    />\r\n                    {(state.appointments.length > 0) &&\r\n                        <AutoLoader callback={appendAppointments} />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </FluidContainer>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Col, Row } from '../../../components/layout';\r\n\r\nimport TitleBar, { TitleBarLink, TitleBarLinks, TitleBarSearch } from '../../home/titleBar';\r\nimport InfiniteAppointmentList from '../lists';\r\n\r\n\r\nexport default function WaitingRoomView(props) {\r\n    const session = useSelector(s => s.session);\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n    const showNewAppointment = !Boolean(session.isPhysician);\r\n\r\n    return (\r\n        <>\r\n            <TitleBar title=\"Waiting Room\">\r\n                <TitleBarSearch\r\n                    handleSearch={setSearchQuery}\r\n                    placeholder=\"Search appointments...\"\r\n                />\r\n                <TitleBarLinks>\r\n                    {showNewAppointment &&\r\n                        <TitleBarLink\r\n                            path=\"/appointments?view=new\"\r\n                            title=\"New Appointment\"\r\n                            icon=\"add\"\r\n                        />\r\n                    }\r\n                </TitleBarLinks>\r\n            </TitleBar>\r\n            <Row className=\"flex-grow-1\">\r\n                <Col>\r\n                    <InfiniteAppointmentList \r\n                        view=\"waiting\"\r\n                        search={searchQuery}\r\n                        defaultMessage=\"Hurray! You've caught up with all your appointments.\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}"],"sourceRoot":""}