{"version":3,"sources":["containers/appointments/appointment/views/detailView/medications/addSection.js","containers/appointments/appointment/views/detailView/medications/listSection.js","containers/appointments/appointment/views/detailView/medications/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["AddSection","props","useState","errorMessage","setErrorMessage","name","dosage","fields","setFields","handleChange","e","a","target","value","preventDefault","newMedication","fromUsername","Username","user","session","toUsername","appointment","patient","fetch","id","method","credentials","headers","authToken","body","JSON","stringify","response","json","data","ok","Error","message","appendMedication","console","error","className","handleSubmit","role","for","type","onChange","placeholder","DefaultMedicationItem","MedicationItem","handleDelete","medication","fromCurrentUser","handleClick","ListSection","medications","length","map","index","deleteMedication","MedicationSection","limit","state","setState","url","searchParams","URLSearchParams","append","Math","ceil","toString","newMedications","prevState","updatedMedications","filter","isCurrentUserPhysician","useCompareUsers","physician","title","expandIcon","collapseIcon","callback","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/18.0128fdee.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, FormGroup, FormLabel, FormRow, \r\n    FormSubmit } from '../../../../../../components/form';\r\nimport { Username } from '../../../../../../components/users';\r\n\r\n\r\nexport default function AddSection(props) {\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [fields, setFields] = useState({\r\n        name: \"\",\r\n        dosage: \"\"\r\n    });\r\n\r\n    async function handleChange(e) {\r\n        setFields({\r\n            ...fields,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault();\r\n        try {\r\n            const newMedication = {\r\n                fromUsername: Username({ user: props.session}),\r\n                toUsername: Username({ user: props.appointment.patient}),\r\n                name: fields.name,\r\n                dosage: fields.dosage\r\n            };\r\n\r\n            const response = await fetch(`/api/appointments/${props.appointment.id}/medications`, {\r\n                method: 'POST',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                  'Authorization': `Bearer ${props.session.authToken}`\r\n                },\r\n                body: JSON.stringify(newMedication)\r\n            });\r\n\r\n            let data = await response.json();\r\n            if (!response.ok) {\r\n                throw new Error(data.message);\r\n            }\r\n\r\n            newMedication.id = data.id;\r\n            if (props.appendMedication) {\r\n                props.appendMedication(newMedication);\r\n            }\r\n\r\n            setFields({\r\n                ...fields,\r\n                name: \"\",\r\n                dosage: \"\"\r\n            });\r\n        } catch (err) {\r\n            console.error(`Failed to add new medication. ${err}`);\r\n            setErrorMessage(err.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form className=\"container-fluid\" handleSubmit={handleSubmit}>\r\n            {(errorMessage) &&\r\n                <FormRow className=\"justify-content-center\">\r\n                    <div className=\"alert alert-danger\" role=\"alert\">{errorMessage}</div>\r\n                </FormRow>\r\n            }\r\n            <FormRow className=\"my-2\">\r\n                <FormLabel for=\"medicationsForm01\" className=\"col-sm-4\">Name</FormLabel>\r\n                <FormGroup className=\"col-sm-8\">\r\n                    <input id=\"medicationsForm01\" name=\"name\" type=\"text\" \r\n                        className=\"form-control\" value={fields.name} onChange={handleChange} \r\n                            placeholder=\"Name of Medication\" \r\n                    />\r\n                </FormGroup>\r\n            </FormRow>\r\n            <FormRow className=\"my-2\">\r\n                <FormLabel for=\"medicationsForm02\" className=\"col-sm-4\">Dosage (in mg)</FormLabel>\r\n                <FormGroup className=\"col-sm-8\">\r\n                    <input id=\"medicationsForm02\" name=\"dosage\" type=\"text\" \r\n                        className=\"form-control\" value={fields.dosage} onChange={handleChange}\r\n                            placeholder=\"Dosage (in mg)\" \r\n                    />\r\n                </FormGroup>\r\n            </FormRow>\r\n            <FormRow className=\"my-2 justify-content-center\">\r\n                <FormSubmit className=\"btn-primary col-auto col-md-4\">Add</FormSubmit>\r\n            </FormRow>\r\n        </Form>\r\n    );\r\n}","import React from 'react';\r\nimport { Col, FluidContainer, Row } from '../../../../../../components/layout';\r\nimport { Username } from '../../../../../../components/users';\r\nimport { WidgetList, WidgetListItem, WidgetDropdown, \r\n    WidgetDropdownItem } from '../../../../../../components/widgets';\r\n\r\n\r\nfunction DefaultMedicationItem(props) {\r\n    return (\r\n        <WidgetListItem>\r\n            <FluidContainer>\r\n                <Row>\r\n                    <Col className=\"md-font-sm text-center text-muted\">No medication available</Col>\r\n                </Row>\r\n            </FluidContainer>\r\n        </WidgetListItem>\r\n    );\r\n}\r\n\r\n\r\nfunction MedicationItem(props) {\r\n    async function handleDelete(e) {\r\n        e.preventDefault();\r\n        if (props.handleDelete) {\r\n            props.handleDelete(props.medication.id);\r\n        }\r\n    }\r\n\r\n    const fromUsername = props.medication.fromUsername;\r\n    const currentUsername = Username({ user: props.session });\r\n    const fromCurrentUser = (currentUsername === fromUsername) ? true: false;\r\n\r\n    return (\r\n        <WidgetListItem>\r\n            <FluidContainer>\r\n                <Row>\r\n                    <Col className=\"align-self-center\">\r\n                        <Row>\r\n                            <Col className=\"text-truncate\">{props.medication.name}</Col>\r\n                            <Col className=\"col-auto\">{`${props.medication.dosage} mg`}</Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col className=\"col-auto px-2\">\r\n                        {fromCurrentUser &&\r\n                            <WidgetDropdown>\r\n                                <WidgetDropdownItem handleClick={handleDelete}>Delete</WidgetDropdownItem>\r\n                            </WidgetDropdown>\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </FluidContainer>\r\n        </WidgetListItem>\r\n    );\r\n}\r\n\r\n\r\nexport default function ListSection(props) {\r\n    return (\r\n        <WidgetList>\r\n            {(props.medications.length !== 0) ?\r\n                <>\r\n                    {props.medications.map((medication, index) => (\r\n                        <MedicationItem \r\n                            key={index}\r\n                            session={props.session}\r\n                            medication={medication}\r\n                            handleDelete={props.deleteMedication}\r\n                        />\r\n                    ))}\r\n                </> :\r\n                <DefaultMedicationItem />\r\n            }\r\n        </WidgetList>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { useCompareUsers } from '../../../../../../components/hooks';\r\nimport { AutoLoader } from '../../../../../../components/loaders';\r\nimport { TitleBar, TitleToggler, Widget, \r\n    WidgetCollapsible } from '../../../../../../components/widgets';\r\n\r\nimport AddSection from './addSection';\r\nimport ListSection from './listSection';\r\n\r\n\r\nexport default function MedicationSection(props) {\r\n    const [state, setState] = useState({\r\n        medications: [],\r\n        limit: 10\r\n    });\r\n\r\n    async function appendMedications() {\r\n        try {\r\n            const url = `/api/appointments/${props.appointment.id}/medications`;\r\n\r\n            const searchParams = new URLSearchParams();\r\n            searchParams.append('page', Math.ceil(state.medications.length / state.limit));\r\n            searchParams.append('limit', state.limit);\r\n\r\n            const response = await fetch(`${url}?${searchParams.toString()}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${props.session.authToken}`\r\n                }\r\n            });\r\n\r\n            let newMedications = await response.json();\r\n            if (!response.ok) {\r\n                throw new Error(newMedications.message);\r\n            }\r\n\r\n            setState(prevState => {\r\n                const updatedMedications = [...prevState.medications, ...newMedications];\r\n\r\n                return {\r\n                    ...prevState,\r\n                    medications: updatedMedications\r\n                }\r\n            });\r\n        } catch (err) {\r\n            console.error(`Failed to append more medications. ${err}`);\r\n        }\r\n    }\r\n\r\n    async function appendMedication(newMedication) {\r\n        setState(prevState => {\r\n            const newMedications = [newMedication, ...prevState.medications];\r\n\r\n            return {\r\n                ...prevState,\r\n                medications: newMedications\r\n            }\r\n        });\r\n    }\r\n\r\n    async function deleteMedication(id) {\r\n        try {\r\n            const response = await fetch(`/api/appointments/${props.appointment.id}/medications/${id}`, {\r\n                method: 'DELETE',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                  'Authorization': `Bearer ${props.session.authToken}`\r\n                }\r\n            });\r\n\r\n            let data = await response.json();\r\n            if (!response.ok) {\r\n                throw new Error(data.message);\r\n            }\r\n\r\n            setState(prevState => {\r\n                const newMedications = state.medications.filter(medication => {\r\n                    return medication.id !== id;\r\n                });\r\n\r\n                return {\r\n                    ...prevState,\r\n                    medications: newMedications\r\n                }\r\n            });\r\n        } catch (err) {\r\n            console.error(`Failed to delete medication- ${id}. ${err}`);\r\n        }\r\n    }\r\n\r\n    // Now render view\r\n    const isCurrentUserPhysician = useCompareUsers(props.session, props.appointment.physician);\r\n\r\n    return (\r\n        <>\r\n            <Widget>\r\n                <TitleBar title=\"Medications\">\r\n                    {isCurrentUserPhysician &&\r\n                        <TitleToggler \r\n                            target=\"apptMedicationAdd01\"\r\n                            expandIcon=\"add\"\r\n                            collapseIcon=\"clear\"\r\n                        />\r\n                    }\r\n                </TitleBar>\r\n                <WidgetCollapsible id=\"apptMedicationAdd01\">\r\n                    <AddSection \r\n                        session={props.session}\r\n                        appointment={props.appointment}\r\n                        appendMedication={appendMedication}\r\n                    />\r\n                </WidgetCollapsible>\r\n                <ListSection\r\n                    session={props.session}\r\n                    medications={state.medications}\r\n                    deleteMedication={deleteMedication}\r\n                />\r\n            </Widget>\r\n            <AutoLoader callback={appendMedications} />\r\n        </>\r\n    );\r\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}